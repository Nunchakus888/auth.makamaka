{"version":3,"file":"static/js/600.16295cdb.chunk.js","mappings":"qLAwBA,UAXkB,KAChB,MAAMA,GAAQC,EAAAA,EAAAA,MACMC,EAAAA,EAAAA,GAAcF,EAAMG,YAAYC,KAAK,OAEzD,OACE,SAAC,IAAD,WACE,SAAC,KAAD,Q,qBCdN,MAAMC,GAAeC,E,QAAAA,IAAO,MAAPA,EAAc,QAAC,MAAEN,GAAH,QAAgB,CACjDO,gBAAiBP,EAAMQ,QAAQC,QAAQC,MACvCC,UAAW,YAGb,O,sGCHA,SAASC,EAAiBC,EAAOC,EAAgBC,EAAYC,EAAeC,GAC1E,MAAMC,EAAsC,qBAAXC,QAAuD,qBAAtBA,OAAOJ,YAClEK,EAAOC,GAAYC,EAAAA,UAAe,IACnCL,GAASC,EACJH,EAAWF,GAAOU,QAGvBP,EACKA,EAAcH,GAAOU,QAKvBT,IA4BT,OA1BAU,EAAAA,EAAAA,IAAkB,KAChB,IAAIC,GAAS,EAEb,IAAKP,EACH,OAGF,MAAMQ,EAAYX,EAAWF,GAEvBc,EAAc,KAIdF,GACFJ,EAASK,EAAUH,UAOvB,OAHAI,IAEAD,EAAUE,YAAYD,GACf,KACLF,GAAS,EACTC,EAAUG,eAAeF,MAE1B,CAACd,EAAOE,EAAYG,IAChBE,EAIT,MAAMU,GAAiCR,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAK,qBAE5C,SAASS,EAAiBlB,EAAOC,EAAgBC,EAAYC,GAC3D,MAAMgB,EAAqBV,EAAAA,aAAkB,IAAMR,GAAgB,CAACA,IAC9DmB,EAAoBX,EAAAA,SAAc,KACtC,GAAsB,OAAlBN,EAAwB,CAC1B,MAAM,QACJO,GACEP,EAAcH,GAClB,MAAO,IAAMU,EAGf,OAAOS,IACN,CAACA,EAAoBnB,EAAOG,KACxBkB,EAAaC,GAAab,EAAAA,SAAc,KAC7C,GAAmB,OAAfP,EACF,MAAO,CAACiB,EAAoB,IAAM,QAGpC,MAAMI,EAAiBrB,EAAWF,GAClC,MAAO,CAAC,IAAMuB,EAAeb,QAASc,IAEpCD,EAAeR,YAAYS,GACpB,KACLD,EAAeP,eAAeQ,QAGjC,CAACL,EAAoBjB,EAAYF,IAEpC,OADciB,EAA+BK,EAAWD,EAAaD,GAIxD,SAAS/B,EAAcoC,GAA0B,IAAdC,EAAc,uDAAJ,GAC1D,MAAMvC,GAAQC,EAAAA,EAAAA,KAKRiB,EAAsC,qBAAXC,QAAuD,qBAAtBA,OAAOJ,YACnE,eACJD,GAAiB,EADb,WAEJC,GAAaG,EAAoBC,OAAOJ,WAAa,MAFjD,cAGJC,EAAgB,KAHZ,MAIJC,IACEuB,EAAAA,EAAAA,GAAc,CAChBC,KAAM,mBACNC,MAAOH,EACPvC,UASF,IAAIa,EAA8B,oBAAfyB,EAA4BA,EAAWtC,GAASsC,EACnEzB,EAAQA,EAAM8B,QAAQ,eAAgB,IAEtC,MAAMC,OAAiEC,IAAnCf,EAA+CC,EAAmBnB,EAChGQ,EAAQwB,EAA4B/B,EAAOC,EAAgBC,EAAYC,EAAeC,GAU5F,OAAOG","sources":["views/user/authentication/AuthMainReset.js","views/user/authentication/AuthWrapper1.js","../node_modules/@mui/material/useMediaQuery/useMediaQuery.js"],"sourcesContent":["import {Link, Outlet} from 'react-router-dom';\n\n// material-ui\nimport { useTheme } from '@mui/material/styles';\nimport { Divider, Grid, Stack, Typography, useMediaQuery } from '@mui/material';\n\n// project imports\nimport AuthWrapper1 from '../authentication/AuthWrapper1';\n\n// assets\n\n// ================================|| AUTH3 - Reset ||================================ //\n\nconst AuthReset = () => {\n  const theme = useTheme();\n  const matchDownSM = useMediaQuery(theme.breakpoints.down('md'));\n\n  return (\n    <AuthWrapper1>\n      <Outlet />\n    </AuthWrapper1>\n  );\n};\n\nexport default AuthReset;\n","// material-ui\nimport { styled } from '@mui/material/styles';\n\n// ==============================|| AUTHENTICATION 1 WRAPPER ||============================== //\n\nconst AuthWrapper1 = styled('div')(({ theme }) => ({\n  backgroundColor: theme.palette.primary.light,\n  minHeight: '100vh'\n}));\n\nexport default AuthWrapper1;\n","import * as React from 'react';\nimport { getThemeProps, useThemeWithoutDefault as useTheme } from '@mui/system';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\n/**\n * @deprecated Not used internally. Use `MediaQueryListEvent` from lib.dom.d.ts instead.\n */\n\nfunction useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const [match, setMatch] = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  });\n  useEnhancedEffect(() => {\n    let active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    const queryList = matchMedia(query);\n\n    const updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch(); // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n  return match;\n} // eslint-disable-next-line no-useless-concat -- Workaround for https://github.com/webpack/webpack/issues/14814\n\n\nconst maybeReactUseSyncExternalStore = React['useSyncExternalStore' + ''];\n\nfunction useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia) {\n  const getDefaultSnapshot = React.useCallback(() => defaultMatches, [defaultMatches]);\n  const getServerSnapshot = React.useMemo(() => {\n    if (ssrMatchMedia !== null) {\n      const {\n        matches\n      } = ssrMatchMedia(query);\n      return () => matches;\n    }\n\n    return getDefaultSnapshot;\n  }, [getDefaultSnapshot, query, ssrMatchMedia]);\n  const [getSnapshot, subscribe] = React.useMemo(() => {\n    if (matchMedia === null) {\n      return [getDefaultSnapshot, () => () => {}];\n    }\n\n    const mediaQueryList = matchMedia(query);\n    return [() => mediaQueryList.matches, notify => {\n      // TODO: Use `addEventListener` once support for Safari < 14 is dropped\n      mediaQueryList.addListener(notify);\n      return () => {\n        mediaQueryList.removeListener(notify);\n      };\n    }];\n  }, [getDefaultSnapshot, matchMedia, query]);\n  const match = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);\n  return match;\n}\n\nexport default function useMediaQuery(queryInput, options = {}) {\n  const theme = useTheme(); // Wait for jsdom to support the match media feature.\n  // All the browsers MUI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n  const {\n    defaultMatches = false,\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\n    ssrMatchMedia = null,\n    noSsr\n  } = getThemeProps({\n    name: 'MuiUseMediaQuery',\n    props: options,\n    theme\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['MUI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // TODO: Drop `useMediaQueryOld` and use  `use-sync-external-store` shim in `useMediaQueryNew` once the package is stable\n\n  const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== undefined ? useMediaQueryNew : useMediaQueryOld;\n  const match = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}"],"names":["theme","useTheme","useMediaQuery","breakpoints","down","AuthWrapper1","styled","backgroundColor","palette","primary","light","minHeight","useMediaQueryOld","query","defaultMatches","matchMedia","ssrMatchMedia","noSsr","supportMatchMedia","window","match","setMatch","React","matches","useEnhancedEffect","active","queryList","updateMatch","addListener","removeListener","maybeReactUseSyncExternalStore","useMediaQueryNew","getDefaultSnapshot","getServerSnapshot","getSnapshot","subscribe","mediaQueryList","notify","queryInput","options","getThemeProps","name","props","replace","useMediaQueryImplementation","undefined"],"sourceRoot":""}